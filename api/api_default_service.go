/*
 * Sample API
 *
 * Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
 *
 * API version: 0.1.9
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package usersapi

import (
	"context"
	"net/http"

	"github.com/mreines/go-users-api/model"
	usersrepo "github.com/mreines/go-users-api/repository"
)

// DefaultApiService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {
	return &DefaultApiService{}
}

// UsersGet - Returns a list of users.
func (s *DefaultApiService) UsersGet(ctx context.Context) (ImplResponse, error) {
	// TODO - update UsersGet with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, []string{}) or use other options such as http.Ok ...
	//return Response(200, []string{}), nil
	users := usersrepo.UsersGet()
	return Response(http.StatusOK, users), nil
}

// UsersPost - Create a new user.
func (s *DefaultApiService) UsersPost(ctx context.Context, user User) (ImplResponse, error) {
	// TODO - update UsersPost with the required logic for this service method.
	// Add api_default_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(201, {}) or use other options such as http.Ok ...
	//return Response(201, nil),nil
	created := usersrepo.UsersPost(user.Name)

	return Response(http.StatusCreated, created), nil
}

func (s *DefaultApiService) UsersIdGet(ctx context.Context, id int32) (ImplResponse, error) {
	found := usersrepo.UserGet(uint(id))

	return Response(http.StatusOK, found), nil
}

func (s *DefaultApiService) UsersIdPatch(ctx context.Context, id int32, user User) (ImplResponse, error) {
	update := model.NewUser(user.Name)
	usersrepo.UserPatch(uint(id), &update)

	return Response(http.StatusOK, update), nil
}
