/*
 * Sample API
 *
 * Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
 *
 * API version: 0.1.9
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package usersapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
	"github.com/mreines/go-users-api/util"
)

// A DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer) Router {
	return &DefaultApiController{service: s}
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"UsersGet",
			strings.ToUpper("Get"),
			"/v1/users",
			c.UsersGet,
		},
		{
			"UsersIdGet",
			strings.ToUpper("Get"),
			"/v1/users/{id}",
			c.UsersIdGet,
		},
		{
			"UsersIdPatch",
			strings.ToUpper("Patch"),
			"/v1/users/{id}",
			c.UsersIdPatch,
		},
		{
			"UsersPost",
			strings.ToUpper("Post"),
			"/v1/users",
			c.UsersPost,
		},
	}
}

// UsersGet - Returns a list of users.
func (c *DefaultApiController) UsersGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.UsersGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		util.EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	util.EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersIdGet -
func (c *DefaultApiController) UsersIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, err := util.ParseInt32Parameter(params["id"], true)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.UsersIdGet(r.Context(), id)
	// If an error occurred, encode the error with the status code
	if err != nil {
		util.EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	util.EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersIdPatch - Create a new user.
func (c *DefaultApiController) UsersIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, err := util.ParseInt32Parameter(params["id"], true)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	user := &User{}
	if err := json.NewDecoder(r.Body).Decode(&user); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.UsersIdPatch(r.Context(), id, *user)
	// If an error occurred, encode the error with the status code
	if err != nil {
		util.EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	util.EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersPost - Create a new user.
func (c *DefaultApiController) UsersPost(w http.ResponseWriter, r *http.Request) {
	user := &User{}
	if err := json.NewDecoder(r.Body).Decode(&user); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.UsersPost(r.Context(), *user)
	// If an error occurred, encode the error with the status code
	if err != nil {
		util.EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	util.EncodeJSONResponse(result.Body, &result.Code, w)

}
